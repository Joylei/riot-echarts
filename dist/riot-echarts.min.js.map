{"version":3,"file":null,"sources":["../src/util.ts","../src/chartFactory.ts","../src/echart.ts","../src/dataTable.ts","../src/index.ts"],"sourcesContent":["export function extend(dest, src = {}){\n    const obj = dest || {}\n    Object.keys(src).forEach(key =>{\n        obj[key] = src[key]\n    });\n    return obj;\n}","import DataTable from './dataTable';\r\nimport {extend} from './util';\r\n\r\nconst COLORS = ['#a489d6', '#239afc', '#54d81c', '#5856ce', '#4386a0', '#093084', '#26aabf', '#5a25f9', '#76a0db', '#7588dd', '#f7eb91', '#daf783', '#d321e0', '#7634ef', '#05bc9b', '#cea146', '#ffbfc0', '#5dfc7d', '#ffc9f9', '#9ad5e0', '#8ea4e5', '#490c7f', '#49fcb4', '#20a33c', '#f7ee40', '#fcf63f', '#efef1f', '#f45642', '#e08374', '#30b6ff', '#f75f4f', '#27ddd7', '#af2f49', '#dbc4fc', '#53b220', '#a71dd1', '#15bfa2', '#f79f9e', '#c92427', '#380170', '#ed9f78', '#f464d5', '#dd6158', '#f7cfad', '#36e830', '#80f782', '#90f9ac', '#c69715', '#0a8ed6', '#9ec942', '#f9b1c8', '#a114ff', '#51dba4', '#a4abf2'];\r\n\r\nfunction create(chartType, table, extra?:any) {\r\n    let option = {\r\n        legend: { // legend configuration\r\n            padding: 5, // The inner padding of the legend, in px, defaults to 5. Can be set as array - [top, right, bottom, left].\r\n            itemGap: 10, // The pixel gap between each item in the legend. It is horizontal in a legend with horizontal layout, and vertical in a legend with vertical layout.\r\n            data: []\r\n        },\r\n        tooltip: { // tooltip configuration\r\n            trigger: 'item', // trigger type. Defaults to data trigger. Can also be: 'axis'\r\n        },\r\n        toolbox: {\r\n            show: true,\r\n            feature: {\r\n                magicType: {\r\n                    type: ['line', 'bar', 'stack'],\r\n                    title: {\r\n                        'line': 'Line Chart',\r\n                        'bar': 'Column Chart',\r\n                        'stack': 'Stacked Bar Chart'\r\n                    }\r\n                },\r\n                restore: {\r\n                    title: 'Restore'\r\n                },\r\n                saveAsImage: {\r\n                    title: 'Save AS Image'\r\n                },\r\n            }\r\n        },\r\n        xAxis: [ // The horizontal axis in Cartesian coordinates\r\n            {\r\n                type: 'category', // Axis type. xAxis is category axis by default. As for value axis, please refer to the 'yAxis' chapter.\r\n                boundaryGap: false,\r\n                axisLabel: {\r\n                    show: true,\r\n                    interval: 'auto',\r\n                    textStyle: {\r\n                        fontStyle: 'italic'\r\n                    }\r\n                },\r\n                data: []\r\n            }\r\n        ],\r\n        yAxis: [ // The vertical axis in Cartesian coordinates\r\n            {\r\n                type: 'value', // Axis type. yAxis is value axis by default. As for category axis, please refer to the 'xAxis' chapter.\r\n                boundaryGap: [0.1, 0.1], // Blank border on each side of the coordinate axis. Value in the array represents percentage.\r\n                //splitNumber: 4 // Applicable to value axis. The number of segments. Defaults to 5.\r\n            }\r\n        ],\r\n        series: [],\r\n        color: COLORS,\r\n        calculable: false,\r\n        dataZoom: {\r\n            show: true,\r\n            realtime: true,\r\n            //dataBackgroundColor: \"#80D9C3\",\r\n            handleColor: '#018564',\r\n            fillerColor: '#80D9C3',\r\n            handleSize: 3,\r\n            //y : 'bottom',\r\n            height: 20,\r\n            start: 50,\r\n            end: 100\r\n        }\r\n    };\r\n    const colCount = table.columnCount;\r\n    if (colCount > 1) {\r\n        for (let colIndex = 1; colIndex < colCount; colIndex++) {\r\n            const colName = table.getColumn(colIndex).field;\r\n            option.legend.data.push(colName);\r\n            const item = extend({\r\n                name: colName,\r\n                type: chartType,\r\n                data: []\r\n            }, extra);\r\n            option.series.push(item);\r\n        }\r\n        const rowCount = table.rowCount;\r\n        for (let i = 0; i < rowCount; i++) {\r\n            for (let j = 0; j < colCount; j++) {\r\n                if (j === 0) {\r\n                    option.xAxis[0].data.push(table.getValue(i, j));\r\n                } else {\r\n                    option.series[j - 1].data.push(table.getValue(i, j));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return option;\r\n}\r\n\r\nconst factory = {\r\n    'line': function(table) {\r\n        return create('line', table);\r\n    },\r\n    'bar': function(table) {\r\n        return create('bar', table, {\r\n            barMaxWidth: 25,\r\n            label: {\r\n                normal: {\r\n                    show: true,\r\n                    position: 'outside'\r\n                }\r\n            }\r\n        });\r\n    },\r\n    'pie': function(table) {\r\n        let option = {\r\n            tooltip: {\r\n                trigger: 'item',\r\n                formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n            },\r\n            series: [],\r\n            color: COLORS\r\n        };\r\n        let serie = {\r\n            name: 'Data',\r\n            type: 'pie',\r\n            radius: '55%',\r\n            center: ['50%', '50%'],\r\n            data: []\r\n        };\r\n        serie.name = (table.getColumn(0) || {}).field || 'Data';\r\n        for (let rowIndex = 0, rowCount = table.rowCount; rowIndex < rowCount; rowIndex++) {\r\n            let item = {\r\n                name: table.getValue(rowIndex, 0) || ('Untitled' + rowIndex),\r\n                value: table.getValue(rowIndex, 1) || 0\r\n            };\r\n            serie.data.push(item);\r\n        }\r\n\r\n        option.series.push(serie);\r\n        return option;\r\n    }\r\n};\r\n\r\nexport default function createChartOption(chartType, data) {\r\n    let fn = factory[chartType];\r\n    if (fn) {\r\n        let table = data instanceof DataTable ? data : new DataTable(data);\r\n        return fn(table);\r\n    }\r\n}\r\n","import factory from './chartFactory';\r\nimport * as echarts from 'echarts'\r\nimport DataTable from './dataTable';\r\nimport * as riot from 'riot';\r\n\r\ninterface IEchartTag extends RiotTag {\r\n    isMounted: boolean;\r\n    drawChart(data?: any);\r\n    redrawChart();\r\n    destroyChart();\r\n    chartHost: HTMLElement;\r\n}\r\n\r\ninterface IEchartTagOpts {\r\n    /**\r\n     * fetch data\r\n     */\r\n    fetch?: (cb: (err, data) => any) => any;\r\n    /**\r\n     * the chart type to be rendered\r\n     */\r\n    chart_type: string;\r\n    /**\r\n     * provide data directly; otherwise be provided by fetch function\r\n     */\r\n    data?: DataTable | any[];\r\n}\r\n\r\nconst DRAW_DELAY = 500;\r\n/**\r\n   * delay function call until there is no more invocation;\r\n   * taken from https://remysharp.com/2010/07/21/throttling-function-calls\r\n   * @param  {Function} fn    [description]\r\n   * @param  {number}   delay [description]\r\n   * @param  {any}      scope [description]\r\n   * @return {Function}       [description]\r\n   */\r\nfunction debounce(fn: Function, delay: number, scope?: any) {\r\n    let timer = null;\r\n    return function(...args) {\r\n        let context = scope || this;\r\n        clearTimeout(timer);\r\n        timer = setTimeout(function() {\r\n            fn.apply(context, args);\r\n        }, delay);\r\n    };\r\n}\r\n\r\nriot.tag('echart', '<div class=\"chart\" ref=\"chartHost\" ></div>',\r\n    'echart, echart .chart,[data-is=\"echart\"], [data-is=\"echart\"] .chart {display:block; width:100%; height: 100%;}', \r\n    function(opts: IEchartTagOpts) {\r\n    let self = <IEchartTag>this;\r\n    let chart = null;\r\n\r\n    Object.defineProperty(self, 'chartHost', {\r\n        configurable: false,\r\n        enumerable: false,\r\n        get(){\r\n            return self.refs['chartHost']\r\n        }\r\n    });\r\n\r\n    self.on('mount', () => {\r\n        if (typeof opts.fetch === 'function') {\r\n            opts.fetch((data, err) => {\r\n                if (err) {\r\n                    console.error(err);\r\n                } else {\r\n                    self.drawChart(data);\r\n                }\r\n            });\r\n        } else{\r\n            self.update();\r\n        }\r\n    });\r\n\r\n    self.on('unmount', () => {\r\n        self.destroyChart();\r\n    });\r\n\r\n    self.on('updated', () => {\r\n        if (opts.data) {\r\n            self.drawChart(opts.data);\r\n        }\r\n    });\r\n\r\n    self.drawChart = debounce((data) => {\r\n        if (!self.isMounted || !self.chartHost) {\r\n            return;\r\n        }\r\n        if (!chart) {\r\n            chart = echarts.init(self.chartHost);\r\n        }\r\n        const chartType = opts.chart_type || 'pie';\r\n        const option = factory(chartType, data);\r\n        if (option && chart) {\r\n            chart.setOption(option);\r\n        }\r\n    }, DRAW_DELAY);\r\n\r\n    self.redrawChart = () => {\r\n        self.destroyChart();\r\n        self.update();\r\n    };\r\n\r\n    self.destroyChart = () => {\r\n        if (chart) {\r\n            chart.despose();\r\n            chart = null;\r\n        }\r\n    };\r\n});\r\n","type Field = { field: string };\r\n/**\r\n* Wrap data array for convinient operations.\r\n* the first line of the array is columns,\r\n* and the rest lines are data rows\r\n*/\r\nexport default class DataTable {\r\n    columns: Field[];\r\n    rows: any[][];\r\n    /**\r\n    * @param {Object[][]} data the first line of the array is columns,and the rest lines are data rows\r\n    */\r\n    constructor(data: any[][]) {\r\n        data = data || [];\r\n\r\n        this.columns = [];\r\n        let columns = data[0] || [];\r\n        columns.forEach(item => this.columns.push({ field: item }))\r\n        this.rows = data.slice(1);\r\n    }\r\n\r\n    getColumn(col: number) {\r\n        return this.columns[col];\r\n    }\r\n\r\n    get columnCount() {\r\n        return this.columns.length;\r\n    }\r\n\r\n    get rowCount() {\r\n        return this.rows.length;\r\n    }\r\n\r\n    getRow(row: number) {\r\n        return this.rows[row];\r\n    }\r\n\r\n    getValue(row: number, col: number) {\r\n        if (row < 0 || col < 0) return null;\r\n\r\n        const item = this.rows[row];\r\n        return item ? item[col] : null;\r\n    }\r\n\r\n    setValue(row: number, col: number, val) {\r\n        if (row < 0 || col < 0) return;\r\n\r\n        const item = this.rows[row] || (this.rows[row] = []);\r\n        item[col] = val;\r\n    }\r\n\r\n    /**\r\n    * convert data rows to objects\r\n    * @return {Object[]}\r\n    */\r\n    toJSON(): Object[] {\r\n        return this.rows.map(row => {\r\n            const item = {};\r\n            this.columns.forEach((col, index) => item[col.field] = row[index])\r\n            return item;\r\n        });\r\n    }\r\n}\r\n","import * as DataTable from './dataTable';\r\nimport * as factory from './chartFactory';\r\nimport './echart';\r\n\r\nexport default {\r\n    DataTable,\r\n    factory\r\n};\r\n"],"names":["dest","src","const","obj","Object","keys","forEach","key","chartType","table","extra","let","option","legend","padding","itemGap","data","tooltip","trigger","toolbox","show","feature","magicType","type","title","line","bar","stack","restore","saveAsImage","xAxis","boundaryGap","axisLabel","interval","textStyle","fontStyle","yAxis","series","color","COLORS","calculable","dataZoom","realtime","handleColor","fillerColor","handleSize","height","start","end","colCount","columnCount","colIndex","colName","getColumn","field","push","item","extend","name","rowCount","i","j","getValue","fn","factory","DataTable","delay","scope","timer","context","this","clearTimeout","setTimeout","apply","args","columns","rows","slice","col","length","getRow","row","setValue","val","toJSON","map","index","create","barMaxWidth","label","normal","position","pie","formatter","serie","radius","center","rowIndex","value","DRAW_DELAY","riot.tag","opts","self","chart","defineProperty","configurable","enumerable","get","refs","on","fetch","err","console","error","drawChart","update","destroyChart","debounce","isMounted","chartHost","echarts.init","chart_type","setOption","redrawChart","despose"],"mappings":"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"}